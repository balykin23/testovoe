'use client'

import { useState } from 'react';
import { TSocialEvent } from '@/mocks/types';
import { useToast } from '@/contexts/ToastContext';
import { DropdownMenu, IDropdownMenuItem } from '@/components/common';
import { Avatar } from '@/components/ui/Avatar';
import { formatTimeAgo, cn } from '@/utils';
import { EVENT_TYPES } from '@/constants';
import { EventContent } from './EventContent';
import { FollowButton } from './FollowButton';
import styles from './NotificationCard.module.css';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
interface INotificationCardProps {
  event: TSocialEvent;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 */
export const NotificationCard: React.FC<INotificationCardProps> = ({ event }) => {
  const { user, created } = event;
  const { showSuccess, showInfo, showWarning } = useToast();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Ç–∏–ø–∞ 'follow'
  const [isFollowing, setIsFollowing] = useState<boolean>(
    event.type === 'follow' ? event.is_following ?? false : false
  );

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const [isRead, setIsRead] = useState(false);

  // === –î–ï–ô–°–¢–í–ò–ï 1: –ö–ª–∏–∫ –Ω–∞ –∞–≤–∞—Ç–∞—Ä, –∏–º—è –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º ===
  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUserClick = (e: React.MouseEvent) => {
    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
    showInfo(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name} (${user.username})`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç: router.push(`/profile/${user.id}`)
  };

  // Wrapper –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ event –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤—Å–ø–ª—ã—Ç–∏—è)
  const handleAvatarClick = (e?: React.MouseEvent) => {
    if (e) e.stopPropagation(); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—Å–ø–ª—ã—Ç–∏—è
    showInfo(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name} (${user.username})`);
  };

  // === –î–ï–ô–°–¢–í–ò–ï 2: –ö–ª–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ ===
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
  const handleCardClick = () => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    switch (event.type) {
      case 'comment':
        showInfo(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å—Ç—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º (ID: ${event.target_id})`);
        // router.push(`/posts/${event.target_id}`)
        break;
      case 'like':
        showInfo(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å—Ç—É —Å –ª–∞–π–∫–∞–º–∏ (ID: ${event.target_id})`);
        // router.push(`/posts/${event.target_id}`)
        break;
      case 'mention':
        showInfo(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å—Ç—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º (ID: ${event.target_id})`);
        // router.push(`/posts/${event.target_id}`)
        break;
      case 'new_post':
        showInfo(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É –ø–æ—Å—Ç—É (ID: ${event.target_id})`);
        // router.push(`/posts/${event.target_id}`)
        break;
      case 'follow':
        showInfo(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: ${user.name}`);
        // router.push(`/profile/${user.id}`)
        break;
      case 'paid_subscription':
        showInfo('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏');
        // router.push('/subscriptions')
        break;
    }

    // –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    if (!isRead) {
      setIsRead(true);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ (accessibility)
  const handleCardKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      handleCardClick();
    }
  };

  // === –î–ï–ô–°–¢–í–ò–ï 3: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (—Ç—Ä–∏ —Ç–æ—á–∫–∏) ===
  // –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é
  const menuItems: IDropdownMenuItem[] = [
    {
      label: isRead ? '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ' : '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ',
      icon: isRead ? 'üëÅÔ∏è' : '‚úì',
      onClick: () => {
        setIsRead((prev) => !prev);
        showSuccess(isRead ? '–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ' : '–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ');
      },
    },
    {
      label: '–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: 'üóëÔ∏è',
      variant: 'danger',
      onClick: () => {
        showWarning(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç ${user.name} —É–¥–∞–ª–µ–Ω–æ`);
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
      },
    },
    {
      label: '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è',
      icon: '‚ö†Ô∏è',
      onClick: () => {
        showInfo('–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ');
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã
      },
    },
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  const handleFollowToggle = (e: React.MouseEvent) => {
    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
    setIsFollowing((prev) => !prev);
  };

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —É—Ç–∏–ª–∏—Ç—É cn
  const cardClass = cn(styles.card, isRead && styles.read);

  return (
    <article
      className={cardClass}
      aria-label={`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç ${user.name}`}
      onClick={handleCardClick}
      onKeyDown={handleCardKeyDown}
      tabIndex={0}
      role="button"
    >
      <div className={styles.cardContent}>
        <Avatar
          src={user.avatar}
          alt={user.name}
          size="lg"
          online={user.online}
          verified={user.verified}
          clickable
          onClick={handleAvatarClick}
        />

        <EventContent event={event} onUserClick={handleUserClick} />

        {event.type === EVENT_TYPES.FOLLOW && (
          <FollowButton isFollowing={isFollowing} onClick={handleFollowToggle} />
        )}

        <DropdownMenu
          trigger={
            <button
              type="button"
              className={styles.editBtn}
              aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
            >
              <img
                src="/icons/editIcon.svg"
                alt=""
                className={styles.settingsIcon}
                width={22}
                height={22}
                decoding="async"
              />
            </button>
          }
          items={menuItems}
          align="right"
        />
      </div>
      <div className={styles.cardDate}>
        <time className={styles.time} dateTime={created}>
          {formatTimeAgo(created)}
        </time>
      </div>
    </article>
  );
};

